#pasos iniciales

    git init 
    git status 
    git config -l (Muestra la config de git user, etc)
    git config --list --show-origin (muestra informacion )

#para cambiar el email en la configuracion global

    git config --global  user.email "santy.escc@gmail.com"
    
#para mostrar cambios

    git log --stat (muestra cambios detallados de la carpeta)
    git log --all --graph --decorate --oneline (muestra el log compacto y con lineas ejm merge)
    
    git log archivo.txt (muestra los cambios historicos del archivo)
    git show archivo.txt (muestra los cambios del archivo)
    git diff se pone los codigos hexadecimales de las versiones a comparar
    git shortlog (muestra quien hizo el cambio)
    git log --author=“Nombre del autor” - Confirma realizados por autor que cumplen exactamente con el nombre.


#para eliminar cambios

    git reset --hard o --soft  hexadecimal (nos permite volver a una version anterior)
    --hard se elimina todos los anteriores como si no hubieran existido
    --soft se elimina y sigen los registros en el historial
    git rm (elimina el archivo pero no su historial) --cached o --force

#para revisar diferentes versiones de archivos

    git checkout hexadecimal nombrearchivo 
    (muestra la version deseada -- peligro si se da commit se perdera la ultima version )
    
    git checkout master nombrearchivo (regresa a la ultima version)

    git reset HEAD  (para quitar del stage para que no se guarde con el resto si se nesecita hacer un commit)

#para crear nuevas ramas
    git branch nombre_cabecera (abre una nueva cabecera)
    git checkout nombre_cabecera (para moverse a la nueva cabecera)
    git branch -r (ramas remotas)
    git branch -a (se ven locales y remotas)

#para mostrar informacion de las branchs

    git show-branch --all

# guardar cambios en git
    git add .
    git commit -am "ingresar el comentario"
    git merge "comentario"
    git merge footer
                para unir la rama nombrada con la rama en la que estamos  

#Cambiar la rama principal master  para usar 'main
    git branch -a (muestra la rama actual)
    git checkout master 
    git branch -m main
    git symbolic-ref HEAD refs/heads/main

#Para conectar con el servidor github

#https
    git remote set-url origin https://<githubtoken>@github.com/<username>/<repositoryname>.git (se puede usar para ssh)

#ssh
    git remote set-url origin git@github.com:Santy-escc/projectDemo.git
  
#para ver el repositorio actual siempre ir al proyecto debe mostrarse la rama ejm main

    git remote -v 
    
#guardar cambios en repositorios
    git pull y git push intentar primero

    git pull --rebase origin main (para combinar cambios git y github)
    git push -u origin main (empujar cambios git a github)
    git pull origin main (para cambios de github a git)

#verifica si el agente de ssh es running
    eval $(ssh-agent -s)
        
#para crear claves publica y privada luego copiar en github el rsa.pub
    ssh-keygen -t rsa -b 4096 -C "santy.escc@gmail.com"

#para crear alias de comandos muy largos
    
    alias arbolito = "git log --all --graph --decorate --oneline"
     

#para crear tags y enviarlos a github

    git tag -a v0.1 -m "primera version" 2a5db9e
               name      description      hash number 

    git tag (muestra los tags creados)

    git push origin --tags

#para eliminar un tag 

    #git 
     git tag -d v.03
                 tag name

    #github

        git push origin :refs/tags/v.03

#para guardar cambios en stage sin pasar al archivo (temporal) o para evitar cambios

    git stash 
    git stash list
    git stash branch otraversion
                        branch name

    git stash drop (para eliminar los cambios sin guardarlos)

 #para eliminar las copias de archivos duplicados

    git clean  --dry-run 
    git clean -f (se borra los archivos listados)                      

#para grabar especificos commit y no todos, depende del hash

    git cherry-pick dca3a24
                    hash

#para revisar y recuperar cambios
    git reflog

    git reset --hard 5d34d99 (hard mas usado o soft mantiene el stagin)
                     hash                    

#para guardar el cambios al commit anterior
    git commit --amend 

#para buscar en el proyecto palabras

    git grep -n color (numero linea , contar )
    git grep -c color ( contar )
                word searched

#para buscar en log dr commits

    git log -S "cabecera"
                word searched

#para ver los commits que han hecho los miembros del equipo

    git shortlog

    git shortlog -sn --all (resumen)
    git shortlog -sn --all --no-merges (no cuenta los merges)

#para crear un alias a nivel global de la app

    git config --global alias.stats "shortlog -sn --all --no-merges"
                              name      comando  

    git stats (para ejecutar)

#para ver el manual de un comando "parecido a man"

    git blame --help
        comando

# para revisar quien cambio unas ciertas lineas

   git blame manual_git.txt -L 10,12 -c
             archivo            lineas











